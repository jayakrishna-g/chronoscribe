[tool.poetry]
name = "backend"
version = "0.1.0"
description = "Chronoscribe backend"
authors = ["Your Name <you@example.com>"]
package-mode = false


[tool.poetry.dependencies]
python = "^3.12"
fastapi = "^0.111.0"
tomli = "^2.0.1"
motor = "^3.4.0"
python-jose = "^3.3.0"
schedule = "^1.2.2"
torch = "2.2.2"
transformers = "^4.41.2"
numpy = "1.26.4"
uvicorn = {extras = ["standard"], version = "^0.30.1"}
python-dotenv = "^1.0.1"
pydantic-settings = "^2.3.3"
jwt = "^1.3.1"
bcrypt = "^4.1.3"
redis = "^5.0.7"
loguru = "^0.7.2"


[tool.poetry.group.dev.dependencies]
ruff = "^0.4.9"
black = "^24.4.2"
mypy = "^1.10.0"
isort = "^5.13.2"
motor-types = "^1.0.0b4"
types-python-jose = "^3.3.4.20240106"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.mypy]
exclude = ["venv", ".venv", "alembic"]

[tool.ruff]
target-version = "py310"
exclude = ["alembic"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG001", # unused arguments in functions
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B904",  # Allow raising exceptions without from e, for HTTPException
    "C408",  # Unnecessary list comprehension - can be replaced with generator expression
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true